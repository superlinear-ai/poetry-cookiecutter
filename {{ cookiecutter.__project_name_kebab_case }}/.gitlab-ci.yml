stages:
  - build
  - test
  - {% if cookiecutter.project_type == "package" %}publish{% else %}deploy{% endif %}

variables:
  DOCKER_TLS_CERTDIR: "/certs"

.python_matrix:
  parallel:
    matrix:
      - PYTHON_VERSION: ["{{ cookiecutter.python_version }}"]

.install_devcontainers_cli:
  cache:
    paths:
      - .apk_cache
      - .npm_cache
  before_script:
    - mkdir -p .apk_cache && apk add --cache-dir .apk_cache npm
    - npm install --cache .npm_cache --global --prefer-offline @devcontainers/cli@0.72.0

# Build the Dev Container.
Build:
  extends:
    - .python_matrix
    - .install_devcontainers_cli
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      # Log in to the Docker registry.
      echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
 
      # Compute a hash for the Dev Container image.
      export CI_IMAGE_SHA="$(sha1sum Dockerfile poetry.lock pyproject.toml | sha1sum | cut -c 1-8)"
      echo "CI_IMAGE_SHA=$CI_IMAGE_SHA" >> .env
      
      # Build and push the Dev Container image, unless it already exists.
      IMAGE_NAME="$CI_REGISTRY_IMAGE/devcontainer:$PYTHON_VERSION-$CI_IMAGE_SHA"
      IMAGE_EXISTS=${IMAGE_EXISTS:-$(timeout 2s docker pull "$IMAGE_NAME" >/dev/null 2>&1 && echo $? || echo $?)}
      if [ "$IMAGE_EXISTS" -ne 1 ]; then
        echo "$IMAGE_NAME exists, skipping this job..."
      else
        {%- if cookiecutter.private_package_repository_name %}
        echo "[http-basic.{{ cookiecutter.private_package_repository_name|slugify }}]" >> auth.toml
        echo "username = \"gitlab-ci-token\"" >> auth.toml
        echo "password = \"$CI_JOB_TOKEN\"" >> auth.toml
        export $POETRY_AUTH_TOML_PATH=$(pwd)/auth.toml
        {%- endif %}
        devcontainer build --image-name "$IMAGE_NAME" --workspace-folder .
        docker push "$IMAGE_NAME"
      fi
  artifacts:
    reports:
      dotenv: .env

# Lint and test the {{ cookiecutter.project_type }}.
Test:
  extends:
    - .python_matrix
    - .install_devcontainers_cli
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      devcontainer up --cache-from "type=registry,ref=$CI_REGISTRY_IMAGE/devcontainer:$PYTHON_VERSION-$CI_IMAGE_SHA" --workspace-folder .
      devcontainer exec --workspace-folder . git config --global --add safe.directory /workspaces/{{ cookiecutter.__project_name_kebab_case }}
      devcontainer exec --workspace-folder . poe lint
      devcontainer exec --workspace-folder . poe test
  coverage: '/^TOTAL.*\s+(\d+(?:\.\d+)?)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
      junit:
        - reports/mypy.xml
        - reports/pytest.xml
    untracked: true
    when: always

{% if cookiecutter.project_type == "package" -%}
# Publish this package version to {% if cookiecutter.private_package_repository_name %}a private package repository{% else %}PyPI{% endif %}.
Publish:
  stage: publish
  image: $CI_REGISTRY_IMAGE/devcontainer:{{ cookiecutter.python_version }}-$CI_IMAGE_SHA
  script:
    {%- if cookiecutter.private_package_repository_name %}
    - poetry config repositories.private "{{ cookiecutter.private_package_repository_url.replace('simple/', '').replace('simple', '') }}"
    - poetry config http-basic.private "gitlab-ci-token" "$CI_JOB_TOKEN"
    - poetry publish --build --repository private
    {%- else %}
    - poetry config pypi-token.pypi "$POETRY_PYPI_TOKEN_PYPI"
    - poetry publish --build
    {%- endif %}
  only:
    - tags
{%- else -%}
# Deploy the app to the Docker registry.
Deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      # Log in to the Docker registry.
      echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      
      # Compile a list of tags for the image.
      DOCKER_TAGS=""
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then DOCKER_TAGS="$DOCKER_TAGS latest"; fi
      if [ -n "$CI_COMMIT_TAG" ]; then DOCKER_TAGS="$DOCKER_TAGS $CI_COMMIT_TAG"; fi
      if [ -n "$CI_ENVIRONMENT_NAME" ]; then DOCKER_TAGS="$DOCKER_TAGS $CI_ENVIRONMENT_NAME"; fi
      DOCKER_TAGS_JOINED=""
      for DOCKER_TAG in $DOCKER_TAGS; do
        DOCKER_TAGS_JOINED="$DOCKER_TAGS_JOINED --tag $CI_REGISTRY_IMAGE:$DOCKER_TAG"
      done
      
      # Build the app image.
      {%- if cookiecutter.private_package_repository_name %}
      echo "[http-basic.{{ cookiecutter.private_package_repository_name|slugify }}]" >> auth.toml
      echo "username = \"gitlab-ci-token\"" >> auth.toml
      echo "password = \"$CI_JOB_TOKEN\"" >> auth.toml
      {%- endif %}
      docker build \
        --cache-from "type=registry,ref=$CI_REGISTRY_IMAGE/devcontainer:{{ cookiecutter.python_version }}-$CI_IMAGE_SHA" \
        --pull \
        {%- if cookiecutter.private_package_repository_name %}
        --secret id=poetry-auth,src=auth.toml \
        {%- endif %}
        --target app \
        $DOCKER_TAGS_JOINED \
        .
      
      # Push the tags to the Docker registry.
      for DOCKER_TAG in $DOCKER_TAGS; do
        docker push "$CI_REGISTRY_IMAGE:$DOCKER_TAG"
      done
  only:
    - tags
  when: manual
{%- endif %}